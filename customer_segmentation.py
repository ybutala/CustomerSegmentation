# -*- coding: utf-8 -*-
"""Customer_Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLrhzeqfxXvNbOMZ_pLhe1f214mc2dkz
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import numpy as np
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('Mall_Customers.csv')

df.head()

"""Univariate analysis"""

df.describe()

sns.distplot(df['Annual Income (k$)'])

columns = ['Age','Annual Income (k$)','Spending Score (1-100)']
for i in columns:
  plt.figure()
  sns.distplot(df[i])

sns.kdeplot(x=df['Annual Income (k$)'], shade=True,hue=df['Gender'])

columns = ['Age','Annual Income (k$)','Spending Score (1-100)']
for i in columns:
  plt.figure()
  sns.kdeplot(x=df[i], shade=True, hue=df['Gender'])

columns = ['Age','Annual Income (k$)','Spending Score (1-100)']
for i in columns:
  plt.figure()
  sns.boxplot(data = df, x = df['Gender'], y = df[i])

df['Gender'].value_counts(normalize=True)

"""Bivariate analysis"""

sns.scatterplot(data = df, x = 'Annual Income (k$)', y = 'Spending Score (1-100)')

# df = df.drop(['CustomerID'], axis=1)
sns.pairplot(df, hue='Gender')

df.groupby(['Gender'])[['Age', 'Annual Income (k$)','Spending Score (1-100)']].mean()

df.select_dtypes(include=['number']).corr()

sns.heatmap(df.select_dtypes(include=['number']).corr(), annot=True, cmap='Blues')

"""Clustering (univariate, bivariate and multivariate)"""

clusteringincome = KMeans(n_clusters=3)
clusteringincome.fit(df[['Annual Income (k$)']])
clusteringincome.labels_
df['Income Cluster'] = clusteringincome.labels_
df.head()

df['Income Cluster'].value_counts()

clusteringincome.inertia_

inertia_score = []
for i in range(1,11):
  clusteringincome = KMeans(n_clusters=i)
  clusteringincome.fit(df[['Annual Income (k$)']])
  inertia_score.append(clusteringincome.inertia_)

inertia_score

plt.plot(range(1,11), inertia_score)

df.columns

df.groupby(['Income Cluster'])[['Age', 'Annual Income (k$)','Spending Score (1-100)']].mean()

#bivariate clustering

clustering2 = KMeans(n_clusters=5)
clustering2.fit(df[['Annual Income (k$)','Spending Score (1-100)']])
clustering2.labels_
df['Spending and income Cluster'] = clustering2.labels_
df.head()

inertia_score = []
for i in range(1,11):
  clustering2scree = KMeans(n_clusters=i)
  clustering2scree.fit(df[['Annual Income (k$)','Spending Score (1-100)']])
  inertia_score.append(clustering2scree.inertia_)

plt.plot(range(1,11), inertia_score)

centers = pd.DataFrame(clustering2.cluster_centers_)
centers.columns = ['x','y']
centers

plt.figure(figsize=(8,6))
plt.scatter(x=centers['x'], y=centers['y'], s=100, c='red', marker='*')
sns.scatterplot(data = df, x = 'Annual Income (k$)', y = 'Spending Score (1-100)', hue = 'Spending and income Cluster', palette='pastel')

pd.crosstab(df['Spending and income Cluster'], df['Gender'], normalize='index')

df.groupby(['Spending and income Cluster'])[['Age', 'Annual Income (k$)','Spending Score (1-100)']].mean()

"""Cluster 1 has low age, high annual income, and high spending score - so they could be our target market!!!"""

#multivariate clustering
from sklearn.preprocessing import StandardScaler

scale = StandardScaler()

df.head()

dff = pd.get_dummies(df, drop_first=True)
dff.head()

dff.columns

dff = dff[['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Gender_Male']]
dff.head()

dff = pd.DataFrame(scale.fit_transform(dff))
dff

inertia_score = []
for i in range(1,11):
  clustering3 = KMeans(n_clusters=i)
  clustering3.fit(dff)
  inertia_score.append(clustering3.inertia_)

plt.plot(range(1,11), inertia_score)

